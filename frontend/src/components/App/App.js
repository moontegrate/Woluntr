// –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
import './App.scss';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Header from '../Header/Header';
import LoginModal from '../LoginModal/LoginModal';
import RegisterModal from '../RegisterModal/RegisterModal';
import { Spinner } from 'flowbite-react';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
import getTokens from '../../services/getTokens';

// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
import { lazy, Suspense, useEffect } from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";

// React Helmet
import { HelmetProvider } from "react-helmet-async";

// Redux
import { useDispatch, UseDispatch } from 'react-redux';

const IndexLayout = lazy(() => import("../../pages/layouts/index"));

const App = () => {
    const dispatch = useDispatch();

    useEffect(() => {
        if (localStorage.getItem('refresh_token') && localStorage.getItem('rememberMe')) {
            getTokens()
                .then((access) => {
                    getUserInfo(access)
                        .then((data) => {
                            if (data) {
                                dispatch(setIsAuthorized(true));
                            };
                        })
                        .catch((e) => {
                            toast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', {
                                position: 'bottom-right',
                                icon: 'üò∞'
                            });
                        });
                })
                .catch((e) => {
                    console.log("Token refresh error", e.response?.data);
                    toast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', {
                        position: 'bottom-right',
                        icon: 'üò∞'
                    });
                });
        } else {
            dispatch(setCurrentUser({
                id: 0,
                username: '',
                role: 'anon',
                firstName: '',
                lastName: '',
                company: '',
                email: '',
                phone: '',
                photo: '',
                isChecked: false
            }))
        };
    }, []);

    return (
        <Router>
            <HelmetProvider>
                <div className="App">
                    <Header />
                    <Suspense fallback={<div className='fallback'><Spinner theme={{ color: { info: "fill-main-color" } }} aria-label="Extra large spinner example" size="xl" /></div>}>
                        <Routes>
                            <Route path="/" element={<IndexLayout />} />
                        </Routes>
                    </Suspense>
                </div>
                <LoginModal />
                <RegisterModal />
            </HelmetProvider>
        </Router>
    );
};

export default App;
